"""feat(models): add notification types and niche models

Revision ID: d66e01aa5e2e
Revises: 533a075cb638
Create Date: 2025-06-24 13:27:18.207041

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = 'd66e01aa5e2e'
down_revision = '533a075cb638'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Update notification type enum with new values
    # First, create a new enum with all values
    new_notificationtype_enum = postgresql.ENUM(
        'POST_LIKE', 'POST_COMMENT', 'NEW_FOLLOWER', 'PRODUCT_REVIEW', 
        'REVIEW_UPVOTE', 'ORDER_UPDATE', 'SHIPMENT_UPDATE', 
        'PROMOTIONAL', 'SYSTEM_ALERT', 'REQUEST_OFFER', 'OFFER_ACCEPTED',
        'OFFER_REJECTED', 'OFFER_WITHDRAWN', 'REQUEST_CLOSED', 
        'REQUEST_STATUS_CHANGE', 'REQUEST_EXPIRED', 'CART_ITEM_ADDED',
        'ORDER_PLACED', 'PAYMENT_SUCCESS', 'PAYMENT_FAILED',
        'NICHE_INVITATION', 'NICHE_POST_APPROVED', 'NICHE_POST_REJECTED',
        'MODERATION_ACTION', name='notificationtype_new'
    )
    new_notificationtype_enum.create(op.get_bind())
    
    # Update the column to use the new enum
    op.execute("ALTER TABLE notifications ALTER COLUMN type TYPE notificationtype_new USING type::text::notificationtype_new")
    
    # Drop the old enum and rename the new one
    op.execute("DROP TYPE notificationtype")
    op.execute("ALTER TYPE notificationtype_new RENAME TO notificationtype")
    
    op.create_table('niches',
    sa.Column('id', sa.String(length=12), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'MODERATED', 'ARCHIVED', name='nichestatus'), nullable=True),
    sa.Column('visibility', sa.Enum('PUBLIC', 'PRIVATE', 'RESTRICTED', name='nichevisibility'), nullable=True),
    sa.Column('allow_buyer_posts', sa.Boolean(), nullable=True),
    sa.Column('allow_seller_posts', sa.Boolean(), nullable=True),
    sa.Column('require_approval', sa.Boolean(), nullable=True),
    sa.Column('max_members', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('rules', sa.JSON(), nullable=True),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('member_count', sa.Integer(), nullable=True),
    sa.Column('post_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('niches', schema=None) as batch_op:
        batch_op.create_index('idx_niche_category', ['category_id'], unique=False)
        batch_op.create_index('idx_niche_slug', ['slug'], unique=False)
        batch_op.create_index('idx_niche_status', ['status'], unique=False)
        batch_op.create_index('idx_niche_visibility', ['visibility'], unique=False)

    op.create_table('niche_memberships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('niche_id', sa.String(length=12), nullable=False),
    sa.Column('user_id', sa.String(length=12), nullable=False),
    sa.Column('role', sa.Enum('MEMBER', 'MODERATOR', 'ADMIN', 'OWNER', name='nichemembershiprole'), nullable=True),
    sa.Column('joined_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('invited_by', sa.String(length=12), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_banned', sa.Boolean(), nullable=True),
    sa.Column('banned_until', sa.DateTime(), nullable=True),
    sa.Column('ban_reason', sa.Text(), nullable=True),
    sa.Column('last_activity', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('post_count', sa.Integer(), nullable=True),
    sa.Column('comment_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['niche_id'], ['niches.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('niche_id', 'user_id', name='uq_niche_membership')
    )
    with op.batch_alter_table('niche_memberships', schema=None) as batch_op:
        batch_op.create_index('idx_niche_membership_active', ['is_active'], unique=False)
        batch_op.create_index('idx_niche_membership_role', ['role'], unique=False)
        batch_op.create_index('idx_niche_membership_user', ['user_id'], unique=False)

    op.create_table('niche_moderation_actions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('niche_id', sa.String(length=12), nullable=False),
    sa.Column('moderator_id', sa.String(length=12), nullable=False),
    sa.Column('target_user_id', sa.String(length=12), nullable=False),
    sa.Column('action_type', sa.String(length=50), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('duration', sa.Interval(), nullable=True),
    sa.Column('target_type', sa.String(length=50), nullable=False),
    sa.Column('target_id', sa.String(length=12), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['moderator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['niche_id'], ['niches.id'], ),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('niche_moderation_actions', schema=None) as batch_op:
        batch_op.create_index('idx_moderation_active', ['is_active'], unique=False)
        batch_op.create_index('idx_moderation_niche', ['niche_id'], unique=False)
        batch_op.create_index('idx_moderation_target', ['target_user_id'], unique=False)
        batch_op.create_index('idx_moderation_type', ['action_type'], unique=False)

    op.create_table('niche_posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('niche_id', sa.String(length=12), nullable=False),
    sa.Column('post_id', sa.String(length=12), nullable=False),
    sa.Column('status', postgresql.ENUM('DRAFT', 'ACTIVE', 'ARCHIVED', 'DELETED', name='poststatus', create_type=False), nullable=True),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('moderated_by', sa.String(length=12), nullable=True),
    sa.Column('moderated_at', sa.DateTime(), nullable=True),
    sa.Column('niche_likes', sa.Integer(), nullable=True),
    sa.Column('niche_comments', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['moderated_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['niche_id'], ['niches.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('niche_id', 'post_id', name='uq_niche_post')
    )
    with op.batch_alter_table('niche_posts', schema=None) as batch_op:
        batch_op.create_index('idx_niche_post_featured', ['is_featured'], unique=False)
        batch_op.create_index('idx_niche_post_pinned', ['is_pinned'], unique=False)
        batch_op.create_index('idx_niche_post_status', ['status'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('niche_posts', schema=None) as batch_op:
        batch_op.drop_index('idx_niche_post_status')
        batch_op.drop_index('idx_niche_post_pinned')
        batch_op.drop_index('idx_niche_post_featured')

    op.drop_table('niche_posts')
    with op.batch_alter_table('niche_moderation_actions', schema=None) as batch_op:
        batch_op.drop_index('idx_moderation_type')
        batch_op.drop_index('idx_moderation_target')
        batch_op.drop_index('idx_moderation_niche')
        batch_op.drop_index('idx_moderation_active')

    op.drop_table('niche_moderation_actions')
    with op.batch_alter_table('niche_memberships', schema=None) as batch_op:
        batch_op.drop_index('idx_niche_membership_user')
        batch_op.drop_index('idx_niche_membership_role')
        batch_op.drop_index('idx_niche_membership_active')

    op.drop_table('niche_memberships')
    with op.batch_alter_table('niches', schema=None) as batch_op:
        batch_op.drop_index('idx_niche_visibility')
        batch_op.drop_index('idx_niche_status')
        batch_op.drop_index('idx_niche_slug')
        batch_op.drop_index('idx_niche_category')

    op.drop_table('niches')
    
    # Revert notification type enum to original values
    old_notificationtype_enum = postgresql.ENUM(
        'POST_LIKE', 'POST_COMMENT', 'NEW_FOLLOWER', 'PRODUCT_REVIEW', 
        'REVIEW_UPVOTE', 'ORDER_UPDATE', 'SHIPMENT_UPDATE', 
        'PROMOTIONAL', 'SYSTEM_ALERT', name='notificationtype_old'
    )
    old_notificationtype_enum.create(op.get_bind())
    
    # Update the column to use the old enum (only for existing values)
    op.execute("ALTER TABLE notifications ALTER COLUMN type TYPE notificationtype_old USING type::text::notificationtype_old")
    
    # Drop the new enum and rename the old one
    op.execute("DROP TYPE notificationtype")
    op.execute("ALTER TYPE notificationtype_old RENAME TO notificationtype")
    
    # ### end Alembic commands ###
